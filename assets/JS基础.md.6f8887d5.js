import{_ as s,o as a,c as o,Q as p}from"./chunks/framework.22695b51.js";const F=JSON.parse('{"title":"JSON.parse","description":"","frontmatter":{},"headers":[],"relativePath":"JS基础.md","filePath":"JS基础.md"}'),n={name:"JS基础.md"},l=p('<h1 id="json-parse" tabindex="-1">JSON.parse <a class="header-anchor" href="#json-parse" aria-label="Permalink to &quot;JSON.parse&quot;">​</a></h1><p><code>JSON.parse</code> 函数在解析 JSON 字符串时可能会出现以下情况导致报错：</p><ol><li><p><strong>JSON 语法错误：</strong> 如果 JSON 字符串不符合 JSON 格式的语法规则，比如缺少引号、未关闭的括号、无效的逗号等，<code>JSON.parse</code> 将会抛出一个语法错误。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;{&quot;name&quot;: &quot;John&quot;, age: 30}&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 会报错，因为 age 没有引号</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;{&quot;name&quot;: &quot;John&quot;, age: 30}&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 会报错，因为 age 没有引号</span></span></code></pre></div></li><li><p><strong>不支持的数据类型：</strong> JSON 标准只支持有限的数据类型，包括字符串、数字、布尔、null、对象和数组。如果 JSON 字符串包含其他类型，如日期对象、正则表达式、函数等，<code>JSON.parse</code> 会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;{&quot;date&quot;: new Date()}&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 会报错，因为 JSON 不支持日期对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;{&quot;date&quot;: new Date()}&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 会报错，因为 JSON 不支持日期对象</span></span></code></pre></div></li><li><p><strong>不完整的 JSON 字符串：</strong> 如果 JSON 字符串不完整，缺少必要的键、值或括号，<code>JSON.parse</code> 会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 会报错，因为缺少结束的大括号</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 会报错，因为缺少结束的大括号</span></span></code></pre></div></li><li><p><strong>栈溢出：</strong> 当 JSON 字符串的嵌套层级过深时，<code>JSON.parse</code> 可能会导致栈溢出错误。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">deepJSON</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;{&quot;a&quot;: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[&quot;b: &#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;c&quot;]&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;}&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(deepJSON); </span><span style="color:#6A737D;">// 可能会导致栈溢出错误</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">deepJSON</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;{&quot;a&quot;: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[&quot;b: &#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;c&quot;]&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(deepJSON); </span><span style="color:#6A737D;">// 可能会导致栈溢出错误</span></span></code></pre></div></li><li><p><strong>非法的转义字符：</strong> 在 JSON 字符串中，转义字符必须以反斜杠（<code>\\</code>）开头，后跟一个合法的转义字符，否则会导致解析错误。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&quot;Hello</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">World&quot;&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 会报错，因为 `\\n` 是合法的转义字符，但没有正确转义</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&quot;Hello</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">World&quot;&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 会报错，因为 `\\n` 是合法的转义字符，但没有正确转义</span></span></code></pre></div></li><li><p><strong>重复的属性名：</strong> 在 JSON 对象中，属性名必须是唯一的。如果有重复的属性名，<code>JSON.parse</code> 会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;{&quot;name&quot;: &quot;John&quot;, &quot;name&quot;: &quot;Doe&quot;}&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 会报错，因为属性名 &quot;name&quot; 重复了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;{&quot;name&quot;: &quot;John&quot;, &quot;name&quot;: &quot;Doe&quot;}&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 会报错，因为属性名 &quot;name&quot; 重复了</span></span></code></pre></div></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>使用 JSON.parse 解析 JSON 字符串时，要确保输入的字符串是合法的 JSON，以防止报错。可以使用 try...catch 语句来捕获并处理可能的异常</p></div>',4),e=[l];function t(c,r,y,E,i,d){return a(),o("div",null,e)}const g=s(n,[["render",t]]);export{F as __pageData,g as default};
